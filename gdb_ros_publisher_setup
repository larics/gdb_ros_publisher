set pagination off

define enable ros_publisher
  python gdb_publisher_node.enable_breakpoints()
end

define disable ros_publisher
  python gdb_publisher_node.disable_breakpoints()
end

define save_state_and_disable_ros_publisher
  python gdb_publisher_node.save_state_and_disable_ros_publisher()
end

define restore_ros_publisher_state
  python gdb_publisher_node.restore_ros_publisher_state()
end

define hook-reverse-continue
  save_state_and_disable_ros_publisher
end
define hook-reverse-step
  save_state_and_disable_ros_publisher
end
define hook-reverse-stepi
  save_state_and_disable_ros_publisher
end
define hook-reverse-finish
  save_state_and_disable_ros_publisher
end
define hook-reverse-next
  save_state_and_disable_ros_publisher
end
define hook-stop
  restore_ros_publisher_state
end

define map_build_publish_cartographer
  set $real_time = node.last_scan_matched_point_cloud_time_
  set node.last_scan_matched_point_cloud_time_ = cartographer::common::Time::min()
  python gdb_publisher_node.build_publish_map_cartographer()
  set node.last_scan_matched_point_cloud_time_ = $real_time
end

set $fake_event = (ros::WallTimerEvent *) malloc(sizeof(ros::WallTimerEvent))

define trajectory_state_publish_cartographer
  set $real_time = node.last_scan_matched_point_cloud_time_
  set node.last_scan_matched_point_cloud_time_ = cartographer::common::Time::min()
  call node.PublishTrajectoryStates(*$fake_event)
  set node.last_scan_matched_point_cloud_time_ = $real_time
end

define clock_publish
  call clock_publisher.publish<rosgraph_msgs::Clock_<std::allocator<void> > >(clock)
end
